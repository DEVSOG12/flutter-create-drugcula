import 'dart:convert';import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart' show rootBundle;import 'package:http/http.dart' as http;import 'package:modal_progress_hud/modal_progress_hud.dart';var _j;void main() { rootBundle.loadString('assets/const.json').then((x) { _j = jsonDecode(x); runApp(MaterialApp( home: Home(), )); }); } class Home extends StatefulWidget { @override _HomeState createState() => _HomeState(); } class _HomeState extends State<Home> { var _q = ''; var _d = []; int _item; var _ddi = []; bool _load = false; var pC = PageController(); @override Widget build(BuildContext bCtx) { final border = OutlineInputBorder( borderRadius: BorderRadius.all(Radius.circular(90.0)), borderSide: BorderSide( color: Colors.transparent, )); final textStyle = TextStyle(color: Colors.white, fontSize: 15); Widget imgContainer(String img, double s) { return Container( decoration: new BoxDecoration( image: new DecorationImage( image: new AssetImage(_j["ast2"]), fit: BoxFit.cover, ), ), child: CachedNetworkImage( imageUrl: img, height: s, width: s, placeholder: (ctx, url) => new CircularProgressIndicator(), errorWidget: (ctx, url, err) { return Image.asset(_j["ast2"], width: s, height: s); })); } Widget searchResult() { if (_d.length == 0) { return Center(child: Image.asset(_j["ast1"], width: 320)); } else { return Card( margin: EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 30.0), elevation: 3, child: ListView.builder( itemCount: _d.length, itemBuilder: (BuildContext ctx, int i) { return new ListTile( title: Row( children: <Widget>[ imgContainer(_d[i]['imageUrl'], 70), Expanded( child: Container( padding: EdgeInsets.all(10), child: Text(_d[i]['displayName']))) ], ), onTap: () { onSelect(i); }, ); }, )); } } Widget firstPage() { return Column(children: <Widget>[ Container( margin: EdgeInsets.fromLTRB(20.0, 75.0, 20.0, 0.0), child: Row( children: <Widget>[ Expanded( child: Theme( data: Theme.of(bCtx).copyWith( cursorColor: Colors.black45, hintColor: Colors.transparent, ), child: TextField( decoration: InputDecoration( focusedBorder: border, border: border, prefixIcon: Icon( Icons.search, color: Colors.white, ), hintStyle: textStyle, filled: true, fillColor: Colors.white30, hintText: _j['ast4']), onChanged: (x) => _q = x, onSubmitted: (x) => onSearch(), ), ), ) ], )), Expanded( child: searchResult(), ) ]); } Widget secondPage() { return Column( children: _d.length == 0 || _item == null ? [] : (<Widget>[ Container( alignment: Alignment(-1, -1), margin: EdgeInsets.fromLTRB(20.0, 40.0, 20.0, 10.0), child: IconButton( icon: Icon(Icons.arrow_back), onPressed: () => pC.previousPage( duration: Duration(milliseconds: 300), curve: Curves.easeIn), )), Container( margin: EdgeInsets.fromLTRB(20.0, 0.0, 20.0, 10.0), child: Row( children: <Widget>[ imgContainer(_d[_item]['imageUrl'], 150), Expanded( child: Container( alignment: Alignment(-1, -1), padding: EdgeInsets.all(10), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: <Widget>[ Text(_d[_item]['displayName'], style: textStyle), Text( 'Color: ' + _d[_item]['splcolor_text']), Text('Shape: ' + _d[_item]['splshape_text']) ], ))) ], ), ), Container( color: Colors.white70, height: 50, child: Center( child: Text(_j['ast3'], style: TextStyle( fontWeight: FontWeight.bold, fontSize: 16, color: Colors.black87)), ), ), Expanded( child: _ddi.length == 0 ? Center( child: Text('No Records'), ) : Container( child: ListView.builder( itemCount: _ddi.length, itemBuilder: (BuildContext ctx, int i) { return new ExpansionTile( title: Text(_ddi[i]['name'], style: textStyle), children: <Widget>[ Container( padding: EdgeInsets.fromLTRB( 20, 0, 20, 30), child: Text( _ddi[i]['desc'], style: textStyle, )) ], ); }))) ])); } return Material( color: Color(0xffff8585), child: ModalProgressHUD( inAsyncCall: _load, child: PageView( controller: pC, physics: new NeverScrollableScrollPhysics(), children: <Widget>[firstPage(), secondPage()]))); } void spinner(bool showHide) { setState(() { _load = showHide; }); } void onSearch() { try { spinner(true); http .get( '${_j['dataDisUrl']}?\$\$app_token=${_j['token']}&\$q=$_q&\$order=has_image DESC') .then((r) { final dt = jsonDecode(r.body); dt.forEach((x) { x['displayName'] = (x['rxstring'] != null ? x['rxstring'] : x['medicine_name']); x['imageUrl'] = (x['has_image'] == 'True' ? '${_j['pillBoxUrl']}${x["splimage"]}.jpg' : ''); }); _d = dt; _load = false; }).whenComplete(() => spinner(false)); } catch (e) { spinner(false); } } void onSelect(i) { try { spinner(true); _item = i; _ddi = []; http .get('${_j['rxNavUrl']}?rxcui=${_d[i]['rxcui']}&sources=DrugBank') .then((r) { final dt = jsonDecode(r.body); for (var x in dt['interactionTypeGroup'][0]['interactionType']) { for (var h in x['interactionPair']) { var obj = { 'name': h['interactionConcept'][1]['sourceConceptItem']['name'], 'desc': h['description'] }; _ddi.add(obj); } } }).whenComplete(() => spinner(false)); pC.nextPage(duration: Duration(milliseconds: 300),curve:Curves.easeIn);}catch (e){spinner(false);}}}